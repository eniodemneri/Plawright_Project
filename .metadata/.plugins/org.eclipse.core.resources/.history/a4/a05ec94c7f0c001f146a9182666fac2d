import static org.junit.jupiter.api.Assertions.assertAll;

import java.util.ArrayList;

import org.junit.jupiter.api.Assertions;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.BrowserType;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;

public class shopping_cart {

	private Playwright playwright;
	private Browser browser;
	private Page page;

	@BeforeMethod
	public void setUp() {

		playwright = Playwright.create();
		ArrayList<String> arguments = new ArrayList<>();
		arguments.add("--start-maximized");
		browser = playwright.chromium()
				.launch(new BrowserType.LaunchOptions().setChannel("chrome").setHeadless(false).setArgs(arguments));
		BrowserContext context = browser.newContext(new Browser.NewContextOptions().setViewportSize(null));
		page = context.newPage();
		page.setDefaultTimeout(30000);
		page.navigate("https://demo.nopcommerce.com/login");

		

	}

	@Test
	public void shoppingCart() throws InterruptedException {
		page.fill(".email", "test.playwright@mail.com");
		page.fill("#Password", "Test1234!");
		page.locator(".login-button").click();
		
		page.waitForTimeout(2000);

		page.locator(".cart-label").hover();
		assert page.locator(".mini-shopping-cart > div.buttons > button").isVisible();
		page.locator(".mini-shopping-cart > div.buttons > button").click();
		String url = page.url();
		Assert.assertEquals(url, "https://demo.nopcommerce.com/cart");
		assert page.locator(".continue-shopping-button").isVisible();
		assert page.locator(".estimate-shipping-button").isVisible();

		double totalPrice = 0.0;

		for (int i = 1; i <= 3; i++) {
			String itemPriceSelector = String.format("tbody > tr:nth-child(%d) > td.subtotal", i);
			String itemPriceText = page.textContent(itemPriceSelector);
			double itemPrice = Double.parseDouble(itemPriceText.replaceAll("[^0-9.]", ""));
			totalPrice += itemPrice;
		}

		double totalPriceCart = Double.parseDouble(
				page.textContent(".order-total > .cart-total-right > span > strong").replaceAll("[^0-9.]", ""));
		assert totalPrice == totalPriceCart
				: "Sum of prices of item (" + totalPrice + ") does match the total in the cart(" + totalPriceCart + ")";

	}
	@AfterMethod
	public void closeUp() {
		browser.close();
		playwright.close();
	}

}
